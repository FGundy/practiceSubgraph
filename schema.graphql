
enum TransferType {
  BUY
  SELL
  TRANSFER
  INITIAL_DISTRIBUTION
}
type AddressTracking @entity {
    id: ID!
    addresses: [String!]!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigInt!
  totalFees: BigInt!
  redisFeeOnBuy: BigInt!
  redisFeeOnSell: BigInt!
  taxFeeOnBuy: BigInt!
  taxFeeOnSell: BigInt!
  currentRate: BigInt!
  maxTxAmount: BigInt!
  maxWalletSize: BigInt!
  tradingEnabled: Boolean!
  holders: [Account!]! @derivedFrom(field: "token")
  transferCount: BigInt!
  txCount: BigInt!
  lastUpdateBlock: BigInt!
}

type Account @entity {
  id: ID!
  token: Token!
  balance: BigInt!
  rBalance: BigInt!
  isExcluded: Boolean!
  isBlocked: Boolean!
  transactions: [Transaction!]! @derivedFrom(field: "from")
  receivedTransactions: [Transaction!]! @derivedFrom(field: "to")
  lastUpdateBlock: BigInt!
  lastUpdateRate: BigInt!
  percentageOwned: BigDecimal!
  formattedBalance: BigDecimal! # Add this field
  isContract: Boolean!
  delegatedBalance: BigInt!
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "account")
  lastReflectionRate: BigInt  # For reflection tokens
}

type ReflectionRate @entity {
  id: ID!
  token: Token!
  rate: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Transaction @entity {
  id: ID!
  token: Token!
  from: Account!
  to: Account!
  value: BigInt!
  transferType: TransferType!
  reflectionValue: BigInt!
  feeAmount: BigInt!
  redisFee: BigInt!
  taxFee: BigInt!
  timestamp: BigInt!
  block: BigInt!
  transactionHash: String!
  dexPair: String  # Address of DEX pair if applicable
  priceInETH: BigDecimal
}

type FeeUpdate @entity {
  id: ID!
  token: Token!
  redisFeeOnBuy: BigInt!
  redisFeeOnSell: BigInt!
  taxFeeOnBuy: BigInt!
  taxFeeOnSell: BigInt!
  timestamp: BigInt!
  block: BigInt!
  transactionHash: String!
}

type BalanceSnapshot @entity {
  id: ID!
  account: Account!
  balance: BigInt!
  blockNumber: BigInt!
  rate: BigInt!
  timestamp: BigInt!
}

type DelegateBalance @entity {
  id: ID!
  account: Account!
  delegator: Account!
  votes: BigInt!
  timestamp: BigInt!
}

type LiquidityPosition @entity {
  id: ID!
  pair: Bytes!  # DEX pair address
  account: Account!
  liquidityTokenBalance: BigInt!
  token0Balance: BigInt!
  token1Balance: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

